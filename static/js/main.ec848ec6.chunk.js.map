{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["articles","rubric","title","undertitle","lead","text","author","cover","IndexPage","AboutPage","articlesPage","map","article","index","key","to","ArticlePage","match","articleId","location","params","App","exact","path","component","React","Component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAKMA,EAAW,CACf,CACEC,OAAO,6CACPC,MAAM,2DACNC,WAAW,6EACXC,KAAK,0DACLC,KAAK,oDACLC,OAAO,uCACPC,MAAM,OAER,CACEN,OAAO,6CACPC,MAAM,2DACNC,WAAW,6EACXC,KAAK,0DACLC,KAAK,oDACLC,OAAO,uCACPC,MAAM,QAIJC,EAAY,WAChB,OAAO,0CAGHC,EAAY,WAChB,OAAO,2CAGHC,EAAe,WACnB,OACE,6BACGV,EAASW,KAAI,SAACC,EAASC,GAAV,OACZ,yBAAKC,IAAKD,GACR,6BAAMD,EAAQX,QACd,6BAAMW,EAAQV,OACd,6BAAMU,EAAQR,MACd,kBAAC,IAAD,CAAMW,GAAE,mBAAcF,EAAQ,IAA9B,yFACA,mCAQJG,EAAc,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAETC,GAF+B,EAAfC,SAGxBF,EADFG,OAAUF,WAGZ,OACE,6BACE,2BACE,6BAAMlB,EAASkB,EAAY,GAAGjB,QAC9B,6BAAMD,EAASkB,EAAY,GAAGhB,OAC9B,6BAAMF,EAASkB,EAAY,GAAGd,MAC9B,6BAAMJ,EAASkB,EAAY,GAAGb,MAC9B,6BAAML,EAASkB,EAAY,GAAGZ,WA4BvBe,E,uKAjBX,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMN,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IACjC,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,YAAYC,UAAWd,IACzC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,sBAAsBC,UAAWR,IACnD,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,SAASC,UAAWf,U,GAZ9BgB,IAAMC,WC3DJC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASZ,MACvB,2DCZNa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec848ec6.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Link, BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nconst articles = [\n  {\n    rubric: `Рубрика`,\n    title: `Заголовок_1`,\n    undertitle: `Подзаголовок_1`,\n    lead: `Текст лида`,\n    text: `Сам текст`,\n    author: `Иванов`,\n    cover: `img`,\n  },\n  {\n    rubric: `Рубрика`,\n    title: `Заголовок_2`,\n    undertitle: `Подзаголовок_2`,\n    lead: `Текст лида`,\n    text: `Сам текст`,\n    author: `Петров`,\n    cover: `img`,\n  }\n];\n\nconst IndexPage = () => {\n  return <h3>Home Page</h3>;\n};\n\nconst AboutPage = () => {\n  return <h3>About Page</h3>;\n};\n\nconst articlesPage = () => {\n  return (\n    <div>\n      {articles.map((article, index) => (\n        <div key={index}>\n          <div>{article.rubric}</div>\n          <div>{article.title}</div>\n          <div>{article.lead}</div>\n          <Link to={`/article/${index + 1}`}>Читать полность</Link>\n          <hr/>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n\nconst ArticlePage = ({ match, location }) => {\n  const {\n    params: { articleId }\n  } = match;\n\n  return (\n    <div>\n      <p>\n        <div>{articles[articleId - 1].rubric}</div>\n        <div>{articles[articleId - 1].title}</div>\n        <div>{articles[articleId - 1].lead}</div>\n        <div>{articles[articleId - 1].text}</div>\n        <div>{articles[articleId - 1].author}</div>\n      </p>\n    </div>\n  );\n};\n\n\n\nclass App extends React.Component {\n\n  render(){\n    return(\n      <div>\n        <Router>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/articles\">articles</Link>\n          <Route exact path=\"/\" component={IndexPage} />\n          <Route exact path=\"/articles\" component={articlesPage} />\n          <Route exact path=\"/article/:articleId\" component={ArticlePage} />\n          <Route exact path=\"/about\" component={AboutPage} />\n        </Router>\n        {/*<a href=\"/articles\"> Читать другие матералы номера газеты</a>*/}\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}